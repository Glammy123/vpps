name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Install Tailscale
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-ipn-setup-latest.exe" -OutFile "tailscale-setup.exe"
        Start-Process -FilePath ".\tailscale-setup.exe" -ArgumentList "/S" -Wait  # Silent install
        Start-Sleep -Seconds 10 # Give it some time to finish installation


    - name: Authenticate Tailscale
      shell: powershell
      run: |
        #Start tailscale service
        Start-Service -Name "Tailscale"
        # Authenticate using the Tailscale auth key (as a secret).  Much better than interactive login.
        tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=gh-runner-${{ github.run_id }} --advertise-exit-node=false --advertise-routes=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16  --accept-routes=true

    - name: Get Tailscale IP
      shell: powershell
      id: get-ip
      run: |
        $tailscaleStatus = tailscale status --json
        $tailscaleStatus = $tailscaleStatus | ConvertFrom-Json
        $tailscaleIP = $tailscaleStatus.Self.TailscaleIPs[0]  # Get the first Tailscale IP (usually the relevant one)
        Write-Host "Tailscale IP: $tailscaleIP"
        echo "::set-output name=tailscale_ip::$tailscaleIP"


    - name: Enable RDP and Set Firewall Rules
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        net user runneradmin "P@ssw0rd!"  # Also set the password with net user (sometimes Set-LocalUser doesn't apply immediately)

    - name: Keep Workflow Alive
      shell: pwsh # Use PowerShell Core for improved compatibility with `Start-Sleep`
      run: |
        Write-Host "RDP to: ${{ steps.get-ip.outputs.tailscale_ip }}:3389"
        Write-Host "Username: runneradmin"
        Write-Host "Password: P@ssw0rd!"
        Write-Host "Workflow running indefinitely.  Manually cancel the workflow to stop."
        while ($true) {
          Start-Sleep -Seconds 3600  # Sleep for 1 hour (3600 seconds) and then check again.  This keeps the job alive.
          Write-Host "Still running..."
        }
